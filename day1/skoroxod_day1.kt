package ru

import io.reactivex.Observable
import io.reactivex.functions.BiFunction
import org.testng.annotations.Test
import kotlin.test.assertEquals

/**
 * Created by skorokhodov on 01.12.2017.
 */
class CodeAdventTest {

    val puzzle = "111831362354551173134957758417849716877188716338" +
            "227121869992652972154651632296676464285261171625892888" +
            "5987387219253574792494868863752797416512246866426472679" +
            "7944593983667325344648942876148682884471381619841485276" +
            "9942459766921928735591892723619845983117283575762694758" +
            "2239562625835566753795334794589641524619733214327688581" +
            "6581854948422924186965772516676966224957488943522769827" +
            "143942351117565387562297612174934475673465824824521227" +
            "32421154889618187198282589366532363519242922518213523894" +
            "71971641957941593141159982696396228218461855752555358856" +
            "127582128823657548151545741663495182446281491763249374581" +
            "7744262258224741123387456291942139763287629858841273244439" +
            "8416357171194111398682616892118756786128826874466314286786" +
            "6165546795621466134333541274633769865956692539151971953651" +
            "88638119587763891935521664273184865964926321725859945664663" +
            "54126234611387929458545361549767321674393555489657783132648" +
            "24237176152196614333748919711422188148687299757751955297978" +
            "137561935963366682742334867854892581388263132968999722366495" +
            "346854828316842352829827989419393594846893842746149235681921" +
            "9514761325851992653668362573221216814718771878472197123259337" +
            "1414915156892245611114952462999593315692441846856764949472882" +
            "8858254296824372929211977446729691143995333874752448315632185" +
            "286348657293395339475256796591968717487615896959976413637422536" +
            "563273537972841783386358764761364989261322293887361558128521915" +
            "542454126546182855197637753115352541578972298715522386683914777" +
            "967729562229395936593272269661295295223113186683594678533511783" +
            "1874221936262345738498811858496263897743943511155274518869628444" +
            "3194718842919519172466298241161981581165274173374486441166676613" +
            "39519545953448371796356681778459375785751171688757541815235844426" +
            "993841671113178751381795679391745899178945974928164766621867468375" +
            "52978671142265114426813792549412632291424594239391853358914643327549" +
            "19216546662873761458145818973257981491946879549341576251737222786261" +
            "4224911844744711698557324454211123571327224554259626961741919243229688" +
            "68483881391255339769893723711428794444672291919874318984842839935684262" +
            "6198635297851274879128322358195585284984366515428245928111112613638341345371"

    val puzzle2 = "111831362354551173134957758417849716877188716338227121869992652972154651632296676464285261171625892888598738721925357479249486886375279741651224686642647267979445939836673253446489428761486828844713816198414852769942459766921928735591892723619845983117283575762694758223956262583556675379533479458964152461973321432768858165818549484229241869657725166769662249574889435227698271439423511175653875622976121749344756734658248245212273242115488961818719828258936653236351924292251821352389471971641957941593141159982696396228218461855752555358856127582128823657548151545741663495182446281491763249374581774426225822474112338745629194213976328762985884127324443984163571711941113986826168921187567861288268744663142867866165546795621466134333541274633769865956692539151971953651886381195877638919355216642731848659649263217258599456646635412623461138792945854536154976732167439355548965778313264824237176152196614333748919711422188148687299757751955297978137561935963366682742334867854892581388263132968999722366495346854828316842352829827989419393594846893842746149235681921951476132585199265366836257322121681471877187847219712325933714149151568922456111149524629995933156924418468567649494728828858254296824372929211977446729691143995333874752448315632185286348657293395339475256796591968717487615896959976413637422536563273537972841783386358764761364989261322293887361558128521915542454126546182855197637753115352541578972298715522386683914777967729562229395936593272269661295295223113186683594678533511783187422193626234573849881185849626389774394351115527451886962844431947188429195191724662982411619815811652741733744864411666766133951954595344837179635668177845937578575117168875754181523584442699384167111317875138179567939174589917894597492816476662186746837552978671142265114426813792549412632291424594239391853358914643327549192165466628737614581458189732579814919468795493415762517372227862614224911844744711698557324454211123571327224554259626961741919243229688684838813912553397698937237114287944446722919198743189848428399356842626198635297851274879128322358195585284984366515428245928111112613638341345371"

    @Test
    fun testFirst() {
        assertEquals(3, Day1.firstPuzzle("1122") )
        assertEquals(0, Day1.firstPuzzle("1234") )
        assertEquals(4, Day1.firstPuzzle("1111") )
        assertEquals(1, Day1.firstPuzzle("1") )
        assertEquals(0, Day1.firstPuzzle("12") )
        assertEquals(0, Day1.firstPuzzle("1212121212") )
        assertEquals(6, Day1.firstPuzzle("222") )
        assertEquals(1044, Day1.firstPuzzle(puzzle) )
    }

    @Test
    fun testSecond() {
        assertEquals(6, Day1.secondPuzzle("1212") )
        assertEquals(0, Day1.secondPuzzle("1221") )
        assertEquals(4, Day1.secondPuzzle("123425") )
        assertEquals(12, Day1.secondPuzzle("123123") )
        assertEquals(4, Day1.secondPuzzle("12131415") )
        assertEquals(1054, Day1.secondPuzzle(puzzle2) )
    }

    @Test
    fun testFirst2() {
        assertEquals(3, Day1.firstPuzzle2("1122") )
        assertEquals(0, Day1.firstPuzzle2("1234") )
        assertEquals(4, Day1.firstPuzzle2("1111") )
        assertEquals(1, Day1.firstPuzzle2("1") )
        assertEquals(0, Day1.firstPuzzle2("12") )
        assertEquals(0, Day1.firstPuzzle2("1212121212") )
        assertEquals(6, Day1.firstPuzzle2("222") )
        assertEquals(1044, Day1.firstPuzzle2(puzzle) )
    }

    @Test
    fun testSecond2() {
        assertEquals(6, Day1.secondPuzzle2("1212") )
        assertEquals(0, Day1.secondPuzzle2("1221") )
        assertEquals(4, Day1.secondPuzzle2("123425") )
        assertEquals(12, Day1.secondPuzzle2("123123") )
        assertEquals(4, Day1.secondPuzzle2("12131415") )
        assertEquals(1054, Day1.secondPuzzle2(puzzle2) )
    }

}

class Day1() {
    companion object {
        fun firstPuzzle(puzzle: String, offset: Long = 1 ): Int {
            val first = Observable.fromIterable(puzzle.asIterable())
                    .map( {Character.getNumericValue(it)} )
            val second = Observable.concat(first.skip(offset), first.take(offset))

            return first.zipWith(second, BiFunction<Int, Int, Pair<Int,Int>> { a, b -> Pair(a, b)} )
                    .filter( { it.first == it.second})
                    .map( {it.first } )
                    .reduce( { acc, item ->  acc + item })
                    .toSingle(0).blockingGet()
        }

        fun secondPuzzle(puzzle: String): Int {
            if (puzzle.length % 2 != 0) return 0
            return firstPuzzle(puzzle, (puzzle.length / 2).toLong() )
        }

        fun firstPuzzle2(puzzle: String, offset : Int = 1): Int {
          val first = puzzle.map { Character.getNumericValue(it) }
          val second =  first.takeLast(first.size -offset).plus(first.take(offset))

          return first.zip(second)
                  .filter { p -> p.first == p.second }
                  .map { p -> p.first }
                  .sum()
        }

        fun secondPuzzle2(puzzle: String): Int {
            if (puzzle.length % 2 != 0) return 0
            return firstPuzzle2(puzzle, puzzle.length / 2 )
        }

    }

}